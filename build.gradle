// See: https://java.awsblog.com/post/TxQ4JROAWSCDWU/Managing-Dependencies-in-Gradle-with-AWS-SDK-for-Java-Bill-of-Materials-module-B
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" } // For grunt plugin
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE",
                  "com.moowork.gradle:gradle-node-plugin:0.13",
                  "com.moowork.gradle:gradle-grunt-plugin:0.13"
    }
}
apply plugin: "io.spring.dependency-management"
apply plugin: "com.moowork.node"
apply plugin: "com.moowork.grunt"

apply plugin: 'java'
apply plugin: 'eclipse' // Generates Eclipse IDE project files
apply plugin: 'idea' // Generates IntelliJ Idea Community Edition IDE project files
apply plugin: 'project-report'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // Specify AWS SDK version here.
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.43'
    }
}

sourceSets {
    acceptancetest
}

grunt {
    // Set the directory where Gruntfile.js should be found
    workDir = file("${project.projectDir}/angularjs")

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Grunt should be buffered - useful when running tasks in parallel
    bufferOutput = false
}

configurations {
    acceptancetestCompile.extendsFrom testCompile
    acceptancetestRuntime.extendsFrom testRuntime
}

ext.cucumberVersion = '1.2.5'
ext.seleniumVersion = '2.9.0'
ext.hamcrestVersion = '1.3'
ext.junitVersion = '4.12'
ext.jmockVersion = '2.8.0'

// Prevent httpclient dependency version conflict - as it breaks htmlunitdriver.
configurations.all {
    resolutionStrategy {
        force 'org.apache.httpcomponents:httpclient:4.5.1'
    }
}

dependencies {
    compile               'com.amazonaws:aws-java-sdk-api-gateway',
                          'com.amazonaws:aws-lambda-java-core:1.1.0',
                          'com.amazonaws:aws-lambda-java-events:1.1.0',
                          'com.amazonaws:aws-java-sdk-cloudformation',
                          'com.amazonaws:aws-java-sdk-cognitoidp',
                          'com.amazonaws:aws-java-sdk-events',
                          'com.amazonaws:aws-java-sdk-iam',
                          'com.amazonaws:aws-java-sdk-lambda',
                          'com.amazonaws:aws-java-sdk-simpledb',
                          'com.amazonaws:aws-java-sdk-s3',
                          'com.amazonaws:aws-java-sdk-sns',
                          'com.amazonaws:aws-java-sdk-logs',
                          'commons-io:commons-io:2.4',
                          'com.google.guava:guava:19.0',
                          'net.lingala.zip4j:zip4j:1.3.2',
                          'org.apache.velocity:velocity:1.7',
                          'org.apache.commons:commons-lang3:3.2'

    testCompile           "junit:junit:$junitVersion",
                          "org.hamcrest:hamcrest-core:${hamcrestVersion}",
                          "org.hamcrest:hamcrest-library:${hamcrestVersion}",
                          "org.jmock:jmock:${jmockVersion}",
                          "org.jmock:jmock-junit4:${jmockVersion}"

    acceptancetestCompile "info.cukes:cucumber-java:$cucumberVersion",
                          "info.cukes:cucumber-junit:$cucumberVersion",
                          "info.cukes:cucumber-java8:$cucumberVersion",
                          "info.cukes:cucumber-picocontainer:$cucumberVersion",
                          "io.appium:java-client:3.3.0",
                          'org.picocontainer:picocontainer:2.15',
                          "org.seleniumhq.selenium:selenium-java:$seleniumVersion",
                          "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion",
                          "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion",
                          "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion",
                          "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion",
                          "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
}

task gw(type: Wrapper) {
    gradleVersion = '2.14'
    scriptFile = 'gw'
}

task acceptanceTest(type: Test) {
    description = 'Runs the acceptance tests'
    testClassesDir = sourceSets.acceptancetest.output.classesDir
    classpath = sourceSets.acceptancetest.runtimeClasspath
    outputs.upToDateWhen { false }
    dependsOn(test)
}

// Zips of lambda functions to upload to AWS lambda. We have flexibility
// to package all lambdas beneath particular paths into separate zips. The
// layout of each zip is as specified by Amazon. These tasks dump the zips
// in the build/distributions folder, ready for upload to AWS Lambda.
['Squash'].each { targetName -> 
    task "zipLambda${targetName}"(type: Zip) {
        baseName "${targetName}"
        def folderName = "${targetName}".toLowerCase()
        from("${sourceSets.main.output.classesDir}") {
            include "**/${folderName}/**"
            includeEmptyDirs = false
        }
        from processResources
        into('lib') {
           from configurations.runtime // Zip our compile and runtime dependencies
        }
    }
}
task zipAllLambdas(dependsOn: tasks.matching { Task task -> task.name.startsWith("zipLambda")})
zipAllLambdas.dependsOn(classes)
build.dependsOn(zipAllLambdas)

// Zip of everything beneath the angularjs/app folder to upload to AWS.
// During stack creation, this will be unzipped into the S3 website bucket.
task zipAngularjsApp(type: Zip) {
    baseName 'AngularjsApp'
    into('app') {
        from('angularjs/app/') {
            // Include everything...
            include '**'
            // ...except mocks, tests, packages, less, and non-minimised css
            exclude '**/*mock*'
            exclude '**/*test*'
            exclude '**/node_modules/**'
            exclude '**/*.less'
            exclude '**/*.lessmin.css'
            exclude {
              // Exclude all non-minimised css
              details -> details.file.name.endsWith('.css') && !details.file.name.endsWith('.min.css')
            }
        }
    }
    outputs.upToDateWhen { false }
}
grunt_postcss.dependsOn(grunt_less)
zipAngularjsApp.dependsOn(grunt_postcss)
build.dependsOn(zipAngularjsApp)

// N.B. This task will work only if the AWS CLI tools are installed
// Pass it an S3 bucketname and a zip revision number and it will upload
// both zip files and the CloudFormation template to the bucket. e.g.:
// ./gw uploadToS3 -PS3ZipBucketName=<BucketName> -PZipRevision=<revision>
if (!project.hasProperty("S3ZipBucketName")) {
    // Default name of S3 bucket to upload to
    ext.S3ZipBucketName = "squashzips"
}
if (!project.hasProperty("ZipRevision")) {
    // Default revision number suffix for lambda zip file
    ext.ZipRevision = 1
}
task uploadAngularjsZipToAws(type: Exec) {
    description 'Uploads the zipped Angularjs app to the S3 bucket specified by the S3ZipBucketName property (defaults to squashzips).'
    commandLine 'aws', 's3', 'cp', 'build/distributions/AngularjsApp.zip', "s3://$S3ZipBucketName/AngularjsApp.zip"
}
uploadAngularjsZipToAws.dependsOn(zipAngularjsApp)

task uploadLambdaZipsToAws(type: Exec) {
    description 'Uploads the zipped lambda code to the lambdas folder of the S3 bucket specified by the S3ZipBucketName property (defaults to squashzips). Appends an integer suffix specified by the ZipRevision property (defaults to 1).'
    commandLine 'aws', 's3', 'cp', 'build/distributions/Squash.zip', "s3://$S3ZipBucketName/lambdas/Squash${ZipRevision}.zip"
}
uploadLambdaZipsToAws.dependsOn(zipAllLambdas)

task uploadCloudFormationTemplateToAws(type: Exec) {
    description 'Uploads the cloudformation template to the lambdas folder of the S3 bucket specified by the S3ZipBucketName property (defaults to squashzips).'
    commandLine 'aws', 's3', 'cp', 'src/main/resources/squash/deployment/templates/Squash.template', "s3://$S3ZipBucketName/lambdas/Squash.template"
}

// Combo task to Upload both zips and the template
task uploadToS3() {
    description 'Uploads the Angularjs app, the lambda code, and the cloudformation template to S3.'
}
uploadToS3.dependsOn(uploadCloudFormationTemplateToAws, uploadAngularjsZipToAws, uploadLambdaZipsToAws)

build.dependsOn(javadoc)

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

eclipse {
  classpath {
    //you can tweak the classpath of the Eclipse project by adding extra configurations:
    plusConfigurations += [ configurations.acceptancetestCompile ]
  }
}