{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates all resources for the squash booking website",

  "Metadata" : {
    "Comment" : "Copyright 2015-2016 Robin Steel",
    "Comment" : "",
    "Comment" : "Licensed under the Apache License, Version 2.0 (the \"License\");",
    "Comment" : "you may not use this file except in compliance with the License.",
    "Comment" : "You may obtain a copy of the License at",
    "Comment" : "",
    "Comment" : "    http://www.apache.org/licenses/LICENSE-2.0",
    "Comment" : "",
    "Comment" : "Unless required by applicable law or agreed to in writing, software",
    "Comment" : "distributed under the License is distributed on an \"AS IS\" BASIS,",
    "Comment" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "Comment" : "See the License for the specific language governing permissions and",
    "Comment" : "limitations under the License."
  },
  
  "Parameters" : {
    "WebsiteBucketName": {
      "Description" : "Name of the S3 bucket from which the bookings website will be served.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "squashwebsite",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "StackShouldCreateWebsiteBucket": {
      "Description" : "Boolean saying whether to create the WebsiteBucketName bucket. If this bucket already exists, set this boolean to false, or stack creation will fail",
      "Type": "String",
      "Default" : "true",
      "AllowedValues" : ["true", "false"],
      "ConstraintDescription" : "Can be true or false."
    },
    "WebsiteAccessLogsBucketName": {
      "Description" : "Name of the S3 bucket in which to store access logs for WebsiteBucketName.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "squashwebsitelogs",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "DatabaseBackupBucketName": {
      "Description" : "Name of the S3 bucket in which to store bookings database backups.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "squashdatabasebackups",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "DatabaseBackupEmail": {
      "Description" : "Email address to receive bookings database backups.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "robinsteel19@outlook.com",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Must be a valid email address."
    },
    "LambdaZipsBucketName": {
      "Description" : "Name of the (pre-existing) S3 bucket with zips for all lambdas, and with this template.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "squashzips",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "LambdaZipsFolderName": {
      "Description" : "Name of the base zipfile folder within the LambdaZipsBucketName bucket",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "lambdas",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "LambdaZipsKeyNameBase": {
      "Description" : "Name of the zipfile within the LambdaZipsFolderName folder, excluding the numerical LambdaZipsRevision suffix and the zip extension",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "Squash",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },
    "LambdaZipsRevision": {
      "Description" : "Integer denoting the lambda zip file revision. Increment this whenever you update the stack using a changed zip file",
      "Type": "Number",
      "Default" : "1",
      "ConstraintDescription" : "Can be any positive integer."
    }
  },

  "Conditions" : {
    "CreateWebsiteBucketCondition" : { "Fn::Equals": [{"Ref": "StackShouldCreateWebsiteBucket"}, "true"]}
  },
    
  "Resources" : {

    "SquashApiGatewayCustomResourceLambdaExecutionRole": {
      "Metadata" : { "Comment1" : "Role assumed by AWS Lambda service to execute",
                     "Comment2" : "the lambda that creates our ApiGateway API",
                     "Comment3" : "(Needs S3 permissions to upload the API sdk)"},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": ["apigateway:*"],
                "Resource": [{"Fn::Join" : ["", [
                  "arn:aws:apigateway:",
                  { "Ref" : "AWS::Region" },
                  "::/restapis/*"
                ]]},
                {"Fn::Join" : ["", [
                  "arn:aws:apigateway:",
                  { "Ref" : "AWS::Region" },
                  "::/restapis"
                ]]}
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject",
                  "s3:DeleteObjectVersion",
                  "s3:PutObjectAcl"
                ],
                "Resource": [
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "WebsiteBucket" },
                  "/*"
                ]]},
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "WebsiteBucket" }
                ]]}]
              },
              {
                "Effect":"Allow",
                "Action":"iam:PassRole",
                "Resource": { "Fn::GetAtt" : ["BookingsApiGatewayInvocationRole", "Arn"] }
              }]
            }
          }
        ]
      }
    },

    "SquashSettingsCustomResourceLambdaExecutionRole": {
      "Metadata" : { "Comment1" : "Role assumed by AWS Lambda service to execute",
                     "Comment2" : "the lambda that wires up our SimpleDB domain and S3 website"},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject"
                ],
                "Resource": [
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "LambdaZipsBucketName" },
                  "/*"
                ]]},
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "LambdaZipsBucketName" }
                ]]}]
              }]
            }
          }
        ]
      }
    },

    "SquashLogGroupsCustomResourceLambdaExecutionRole": {
      "Metadata" : { "Comment1" : "Role assumed by AWS Lambda service to execute",
                     "Comment2" : "the lambda that manages our log groups"},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:PutRetentionPolicy","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              }]
            }
          }
        ]
      }
    },

    "SquashBookingsHtmlCustomResourceLambdaExecutionRole": {
      "Metadata" : { "Comment1" : "Role assumed by AWS Lambda service to execute the lambda",
                     "Comment2" : "that deploys the booking pages to the S3 website bucket."},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:PutRetentionPolicy","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": ["sdb:getAttributes", "sdb:deleteAttributes"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:sdb:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":domain/",
                  { "Ref" : "SquashSimpleDBDomain"}
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject",
                  "s3:DeleteObjectVersion",
                  "s3:PutObjectAcl"
                ],
                "Resource": [
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "WebsiteBucketName" },
                  "/*"
                ]]},
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "WebsiteBucketName" }
                ]]}]
              }]
            }
          }
        ]
      }
    },

    "SquashCognitoCustomResourceLambdaExecutionRole": {
      "Metadata" : { "Comment1" : "Role assumed by AWS Lambda service to execute",
                     "Comment2" : "the lambda that manages our Cognito identity pool"},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:PutRetentionPolicy","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
                },
                {
                "Effect": "Allow",
                "Action": [
                  "cognito-identity:SetIdentityPoolRoles",
                  "cognito-identity:DeleteIdentityPool"
                ],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:cognito-identity:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":identitypool/",
                  { "Ref" : "AWS::Region" },
                  ":*"
                ]]}
                },
                {
                "Effect": "Allow",
                "Action": [
                  "cognito-identity:CreateIdentityPool",
                  "cognito-identity:ListIdentityPools"
                ],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:cognito-identity:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":identitypool/"
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:UpdateAssumeRolePolicy"
                ],
                "Resource": [
                  { "Fn::GetAtt" : ["SquashCognitoAuthenticatedRole", "Arn"] },
                  { "Fn::GetAtt" : ["SquashCognitoUnauthenticatedRole", "Arn"] }]
              }]
            }
          }
        ]
      }
    },

    "SquashCognitoUnauthenticatedRole": {
      "Metadata" : { "Comment1" : "Role assumed by Cognito to provide temporary credentials",
                     "Comment2" : "to unauthenticated users. N.B. The aud value here is the",
                     "Comment3" : "identity pool id. The lambda will edit this role to add an",
                     "Comment4" : "assume-role policy with the identity pool id once it has",
                     "Comment5" : "created the identity pool, and remove the Deny. N.B. No",
                     "Comment6" : "permissions are granted here (Deny), since Cognito is not yet used"},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Deny",
            "Principal": {"Federated": "cognito-identity.amazonaws.com"},
            "Action": [ "sts:AssumeRoleWithWebIdentity" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Deny",
                "Action": [
                  "mobileanalytics:PutEvents",
                  "cognito-sync:*",
                  "execute-api:Invoke"
                ],
                "Resource": "*"
              }]
            }
          }
        ]
      }
    },

    "SquashCognitoAuthenticatedRole": {
      "Metadata" : { "Comment1" : "Role assumed by Cognito to provide temporary credentials",
                     "Comment2" : "to authenticated users. N.B. The aud value here is the",
                     "Comment3" : "identity pool id. The lambda will edit this role to add an",
                     "Comment4" : "assume-role policy with the identity pool id once it has",
                     "Comment5" : "created the identity pool, and remove the Deny. N.B. No",
                     "Comment6" : "permissions are granted here (Deny), since Cognito is not yet used"},
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Deny",
            "Principal": {"Federated": "cognito-identity.amazonaws.com"},
            "Action": [ "sts:AssumeRoleWithWebIdentity" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Deny",
                "Action": [
                  "mobileanalytics:PutEvents",
                  "cognito-sync:*",
                  "execute-api:Invoke"
                ],
                "Resource": "*"
              }]
            }
          }
        ]
      }
    },

    "ValidDatesLambdaExecutionRole": {
      "Metadata" : { "Comment" : "Role assumed by AWS Lambda service to execute the lambda" },
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              }]
            }
          }
        ]
      }
    },

    "BookingsApiGatewayInvocationRole": {
      "Metadata" : { "Comment" : "Role assumed by AWS ApiGateway service to execute the bookings lambdas" },
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["apigateway.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction"
                ],
                "Resource": [
                  { "Fn::GetAtt" : ["ValidDatesGETLambda", "Arn"] },
                  { "Fn::GetAtt" : ["BookingsGETLambda", "Arn"] },
                  { "Fn::GetAtt" : ["BookingsPUTDELETELambda", "Arn"] }]
              }]
            }
          }
        ]
      }
    },

    "BookingsLambdaExecutionRole": {
      "Metadata" : { "Comment" : "Role assumed by AWS Lambda service to execute the bookings-related lambdas" },
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com", "events.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sdb:putAttributes",
                  "sdb:getAttributes",
                  "sdb:deleteAttributes",
                  "sdb:Select"
                ],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:sdb:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":domain/",
                  { "Ref" : "SquashSimpleDBDomain"}
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject",
                  "s3:DeleteObjectVersion",
                  "s3:PutObjectAcl"
                ],
                "Resource": [
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "WebsiteBucketName" },
                  "/*"
                ]]},
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "WebsiteBucketName" }
                ]]},{"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "DatabaseBackupBucketName" },
                  "/*"
                ]]},
                  {"Fn::Join" : ["", [
                  "arn:aws:s3:::",
                  { "Ref" : "DatabaseBackupBucketName" }
                ]]}]
              },
              {
                "Effect": "Allow",
                "Action": "sns:Publish",
                "Resource": [
                  {"Fn::Join" : ["", [
                  "arn:aws:sns:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":",
                  {"Fn::GetAtt" : ["DatabaseBackupSNSTopic", "TopicName"]}
                ]]}]
              }]
            }
          }
        ]
      }
    },

    "SquashScheduledCloudwatchEventCustomResourceRole": {
      "Metadata" : { "Comment" : "Role assumed by AWS Lambda service to execute the ScheduledCloudwatchEvent lambda" },
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": {"Fn::Join" : ["", [
                  "arn:aws:logs:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":log-group:/aws/lambda/",
                  { "Ref" : "AWS::StackName" },
                  "-*"
                ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                  "events:PutRule", "events:DeleteRule", "events:PutTargets", "events:RemoveTargets", "events:ListTargetsByRule"
                ],
                "Resource": [{"Fn::Join" : ["", [
                  "arn:aws:events:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":rule/Prewarmer_*"
                ]]},
                {"Fn::Join" : ["", [
                  "arn:aws:events:",
                  { "Ref" : "AWS::Region" },
                  ":",
                  { "Ref" : "AWS::AccountId" },
                  ":rule/MidnightRunner_*"
                ]]}]
              }]
            }
          }
        ]
      }
    },

    "ValidDatesGETLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to return the list of dates for viewing/making bookings" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "LambdaZipsKeyNameBase"}, {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.booking.lambdas.GetValidDatesLambda::getValidDates",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["ValidDatesLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": "ValidDatesLambdaExecutionRole"
    },

    "BookingsGETLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to return the list of bookings for a specified date" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.booking.lambdas.GetBookingsLambda::getBookings",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["BookingsLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": ["BookingsLambdaExecutionRole", "SquashSettingsCustomResource"]
    },

    "BookingsPUTDELETELambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to create a new booking" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.booking.lambdas.PutDeleteBookingLambda::createOrDeleteBooking",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["BookingsLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": ["BookingsLambdaExecutionRole", "SquashSettingsCustomResource"]
    },

    "UpdateBookingsLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to update booking pages every midnight" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.booking.lambdas.UpdateBookingsLambda::updateBookings",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["BookingsLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": ["BookingsLambdaExecutionRole", "SquashSettingsCustomResource"]
    },

    "WebsiteBucket" : {
      "Metadata" : {
        "Comment" : "Serves the squash website",
        "Comment" : "N.B. The routing rules are to redirect GETs with the selectedDate query string",
        "Comment" : "parameter to the booking page html (in same bucket, but without a query string).",
        "Comment" : "Today.html will redirect to the current days bookings.",
        "Comment" : "N.B. Bucket uses versioning for extra protection against accidental deletion."
      },
      "Type" : "AWS::S3::Bucket",
      "Condition" : "CreateWebsiteBucketCondition",
      "Properties": {
        "BucketName": { "Ref" : "WebsiteBucketName" },
        "AccessControl": "PublicRead",
        "LoggingConfiguration" : {
          "DestinationBucketName" : {"Ref" : "WebsiteLogsBucket"},
          "LogFilePrefix" : "Logs"
        },
        "WebsiteConfiguration" : {
          "IndexDocument" : "today.html",
          "ErrorDocument" : "today.html",
          "RoutingRules" : [{
            "RedirectRule" : {
              "ReplaceKeyPrefixWith" : ""
            },
            "RoutingRuleCondition" : {
              "KeyPrefixEquals" : "?selectedDate="
            }
          }]
        },
         "VersioningConfiguration" : {
          "Status" : "Enabled"
        },
        "LifecycleConfiguration" : {
          "Rules" : [{
            "ExpirationInDays" : 30,
            "NoncurrentVersionExpirationInDays" : 30,
            "Status" : "Enabled"
          }]
        }
      }
    },

    "WebsiteLogsBucket" : {
      "Metadata" : {"Comment" : "Access logs for the squash website will be written to this bucket"},
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain",
      "Properties": {
        "BucketName": { "Ref" : "WebsiteAccessLogsBucketName" },
        "AccessControl": "LogDeliveryWrite",
        "LifecycleConfiguration" : {
          "Rules" : [{
            "ExpirationInDays" : 7,
            "Status" : "Enabled"
          }]
        }
      }
    },

    "DatabaseBackupBucket" : {
      "Metadata" : {"Comment" : "Holds backup snapshots of the bookings database"},
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain",
      "Properties": {
        "BucketName": { "Ref" : "DatabaseBackupBucketName" },
        "VersioningConfiguration" : {"Status" : "Enabled"},
        "LifecycleConfiguration" : {
          "Rules" : [{
            "ExpirationInDays" : 30,
            "NoncurrentVersionExpirationInDays" : 30,
            "Status" : "Enabled"
          }]
        }
      }
    },
 
    "DatabaseBackupSNSTopic" : {
      "Metadata" : {
        "Comment" : "Allows subscribing an email address to receive backup snapshots of the bookings database.",
        "Comment" : "(Primary backup is to S3 - but email can provide extra independent backup, just in case...)"},
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "Subscription" : [
         { "Endpoint" : { "Ref" : "DatabaseBackupEmail" }, "Protocol" : "email" }
        ]
      }
    },

    "DatabaseBackupLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to backup all database bookings" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.booking.lambdas.BackupBookingsLambda::backupBookings",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["BookingsLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": ["BookingsLambdaExecutionRole", "SquashSettingsCustomResource"]
    },

    "SquashApiGatewayCustomResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to manage our custom resource for our ApiGateway API" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "LambdaZipsKeyNameBase"}, {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.deployment.lambdas.ApiGatewayCustomResourceLambda::handleRequest",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["SquashApiGatewayCustomResourceLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": [
        "BookingsApiGatewayInvocationRole",
        "SquashApiGatewayCustomResourceLambdaExecutionRole"
        ]
    },

    "SquashApiGatewayCustomResource" : {
      "Metadata" : { "Comment" : "Lambda-backed custom resource to manage our ApiGateway API" },
      "Type" : "Custom::SquashApiGateway",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["SquashApiGatewayCustomResourceLambda", "Arn"] },
        "ValidDatesGETLambdaURI" : { "Fn::GetAtt" : ["ValidDatesGETLambda", "Arn"] },
        "BookingsGETLambdaURI" : { "Fn::GetAtt" : ["BookingsGETLambda", "Arn"] },
        "BookingsPUTDELETELambdaURI" : { "Fn::GetAtt" : ["BookingsPUTDELETELambda", "Arn"] },
        "BookingsApiGatewayInvocationRole" : { "Fn::GetAtt" : ["BookingsApiGatewayInvocationRole", "Arn"] },
        "WebsiteBucket" : {"Ref" : "WebsiteBucket"},
        "Stage Name" : "Squash",
        "Region" : { "Ref" : "AWS::Region" },
        "Revision" : {"Ref" : "LambdaZipsRevision"}
      },
      "DependsOn": ["SquashApiGatewayCustomResourceLambda", "WebsiteBucket"]
    },

    "SquashSettingsCustomResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment1" : "Lambda to manage our custom resource to configure settings file for use by lambda",
                     "Comment2" : "functions. This modifies the lambda zip file in S3 so that its settings file",
                     "Comment3" : "contains various values that are not known until stack creation time." },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "LambdaZipsKeyNameBase"}, {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.deployment.lambdas.SquashSettingsCustomResourceLambda::handleRequest",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["SquashSettingsCustomResourceLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": ["SquashSettingsCustomResourceLambdaExecutionRole"]
    },

    "SquashSettingsCustomResource" : {
      "Metadata" : { "Comment" : "Lambda-backed custom resource to configure settings file for use by lambda functions" },
      "Type" : "Custom::SquashSettings",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["SquashSettingsCustomResourceLambda", "Arn"] },
        "SimpleDBDomainName" : { "Ref" : "SquashSimpleDBDomain" },
        "WebsiteBucket" : {"Ref" : "WebsiteBucketName"},
        "DatabaseBackupBucket" : {"Ref" : "DatabaseBackupBucketName"},
        "DatabaseBackupSNSTopic" : {"Ref" : "DatabaseBackupSNSTopic"},
        "LambdaZipsBucket" : {"Ref" : "LambdaZipsBucketName"},
        "S3InputKey" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "LambdaZipsKeyNameBase"}, {"Ref" : "LambdaZipsRevision"}, ".zip"]]},
        "S3OutputKey" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]},
        "Region" : { "Ref" : "AWS::Region" },
        "Revision" : {"Ref" : "LambdaZipsRevision"}
      },
      "DependsOn": ["SquashSettingsCustomResourceLambda", "SquashSimpleDBDomain", "WebsiteBucket", "DatabaseBackupBucket", "DatabaseBackupSNSTopic"]
    },

    "SquashSimpleDBDomain" : {
      "Metadata" : { "Comment" : "Creates a new randomly-named SimpleDB domain to hold the bookings" },
      "Type" : "AWS::SDB::Domain",
      "Properties" : {
        "Description" : "The domain to hold the bookings."
      }
    },

    "SquashLogGroupsCustomResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment1" : "Lambda to ensure log groups for each lambda function exist",
                     "Comment2" : "and to reduce their retention period from forever to a few days." },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "LambdaZipsKeyNameBase"}, {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.deployment.lambdas.LogGroupsCustomResourceLambda::handleRequest",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["SquashLogGroupsCustomResourceLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": "SquashLogGroupsCustomResourceLambdaExecutionRole"
    },

    "SquashLogGroupsCustomResource": {
      "Type": "Custom::SquashLogGroups",
      "Metadata" : { "Comment1" : "Lambda to ensure log groups for each lambda function exist",
                     "Comment2" : "and to reduce their retention period from forever to a few days." },
      "Type" : "Custom::SquashLogGroups",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["SquashLogGroupsCustomResourceLambda", "Arn"] },
        "ValidDatesLambdaName" : { "Ref" : "ValidDatesGETLambda" },
        "BookingsGETLambdaName" : { "Ref" : "BookingsGETLambda" },
        "BookingsPUTDELETELambdaName" : { "Ref" : "BookingsPUTDELETELambda" },
        "SquashApiGatewayCustomResourceLambdaName" : { "Ref" : "SquashApiGatewayCustomResourceLambda" },
        "SquashSettingsCustomResourceLambdaName" : { "Ref" : "SquashSettingsCustomResourceLambda" },
        "SquashBookingsHtmlCustomResourceLambdaName" : { "Ref" : "SquashBookingsHtmlCustomResourceLambda" },
        "SquashCognitoCustomResourceLambdaName" : { "Ref" : "SquashCognitoCustomResourceLambda" },
        "SquashScheduledCloudwatchEventCustomResourceLambdaName" : { "Ref" : "SquashScheduledCloudwatchEventCustomResourceLambda" },
        "UpdateBookingsLambdaName" : { "Ref" : "UpdateBookingsLambda" },
        "Region" : { "Ref" : "AWS::Region" },
        "Revision" : {"Ref" : "LambdaZipsRevision"}
      },
      "DependsOn": [
        "SquashLogGroupsCustomResourceLambda",
        "ValidDatesGETLambda",
        "BookingsGETLambda",
        "BookingsPUTDELETELambda",
        "SquashApiGatewayCustomResource",
        "SquashSettingsCustomResource",
        "SquashBookingsHtmlCustomResource",
        "SquashCognitoCustomResource",
        "SquashScheduledCloudwatchEventCustomResource"
      ]
    },

    "SquashScheduledCloudwatchEventCustomResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to create our scheduled cloudwatch event. This will fire",
                     "Comment" : "every midnight to backup the bookings database and update the",
                     "Comment" : "bookings pages."},
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.deployment.lambdas.ScheduledCloudwatchEventCustomResourceLambda::handleRequest",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["SquashScheduledCloudwatchEventCustomResourceRole", "Arn"] }
      },
      "DependsOn": ["SquashScheduledCloudwatchEventCustomResourceRole", "SquashSettingsCustomResource"]
    },

    "SquashMidnightRefreshScheduledCloudwatchEventCustomResourceLambdaInvokePermission": {
      "Metadata" : { "Comment" : "Permission for our CloudwatchEvents rule to invoke the midnight lambda" },
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["UpdateBookingsLambda", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : { "Fn::GetAtt" : [ "SquashScheduledCloudwatchEventCustomResource", "MidnightScheduledCloudwatchEventRuleArn" ] }
      }
    },

    "SquashMidnightBackupScheduledCloudwatchEventCustomResourceLambdaInvokePermission": {
      "Metadata" : { "Comment" : "Permission for our CloudwatchEvents rule to invoke the midnight lambda" },
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["DatabaseBackupLambda", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : { "Fn::GetAtt" : [ "SquashScheduledCloudwatchEventCustomResource", "MidnightScheduledCloudwatchEventRuleArn" ] }
      }
    },

    "SquashPrewarmerScheduledCloudwatchEventCustomResourceLambdaInvokePermission": {
      "Metadata" : { "Comment" : "Permission for our CloudwatchEvents rule to invoke the prewarmer lambda" },
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["BookingsPUTDELETELambda", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn" : { "Fn::GetAtt" : [ "SquashScheduledCloudwatchEventCustomResource", "PrewarmerScheduledCloudwatchEventRuleArn" ] }
      }
    },

    "SquashScheduledCloudwatchEventCustomResource" : {
      "Metadata" : { "Comment" : "Lambda-backed custom resource to create our scheduled cloudwatch events" },
      "Type" : "Custom::SquashCloudwatchEvent",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["SquashScheduledCloudwatchEventCustomResourceLambda", "Arn"] },
        "ApiGatewayBaseUrl" : { "Fn::GetAtt" : ["SquashApiGatewayCustomResource", "ApiGatewayBaseUrl"] },
        "UpdateBookingsLambdaArn" : { "Fn::GetAtt" : ["UpdateBookingsLambda", "Arn"] },
        "DatabaseBackupLambdaArn" : { "Fn::GetAtt" : ["DatabaseBackupLambda", "Arn"] },
        "CreateOrDeleteBookingsLambdaArn" : { "Fn::GetAtt" : ["BookingsPUTDELETELambda", "Arn"] },
        "Region" : { "Ref" : "AWS::Region" },
        "Revision" : {"Ref" : "LambdaZipsRevision"}
      },
      "DependsOn": ["SquashScheduledCloudwatchEventCustomResourceRole", "SquashApiGatewayCustomResourceLambda", "WebsiteBucket", "SquashApiGatewayCustomResource"]
    },

    "SquashBookingsHtmlCustomResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment1" : "Lambda to deploy the booking pages to the website bucket. This first modifies",
                     "Comment2" : "bookings.html to insert the Cognito identity pool id, region, and website name." },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "AWS::StackId"}, {"Ref" : "LambdaZipsKeyNameBase"}, "Modified", {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.deployment.lambdas.BookingsHtmlCustomResourceLambda::handleRequest",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["SquashBookingsHtmlCustomResourceLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": ["SquashBookingsHtmlCustomResourceLambdaExecutionRole", "SquashSettingsCustomResource", "SquashApiGatewayCustomResource"]
    },

    "SquashBookingsHtmlCustomResource" : {
      "Metadata" : { "Comment1" : "Lambda to deploy the booking pages to the website bucket. This first modifies",
                     "Comment2" : "bookings.html to insert the Cognito identity pool id, region, and website name." },
      "Type" : "Custom::SquashBookingsHtml",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["SquashBookingsHtmlCustomResourceLambda", "Arn"] },
        "WebsiteBucket" : {"Ref" : "WebsiteBucketName"},
        "ApiGatewayBaseUrl" : { "Fn::GetAtt" : ["SquashApiGatewayCustomResource", "ApiGatewayBaseUrl"] },
        "CognitoIdentityPoolId" : { "Fn::GetAtt" : ["SquashCognitoCustomResource", "CognitoIdentityPoolId"] },
        "Region" : { "Ref" : "AWS::Region" },
        "Revision" : {"Ref" : "LambdaZipsRevision"}
      },
      "DependsOn": ["SquashBookingsHtmlCustomResourceLambda", "SquashCognitoCustomResource", "SquashSettingsCustomResource", "SquashApiGatewayCustomResource"]
    },

    "SquashCognitoCustomResourceLambda": {
      "Type": "AWS::Lambda::Function",
      "Metadata" : { "Comment" : "Lambda to manage our Cognito identity pool" },
      "Properties": {
        "Code": {
          "S3Bucket" : {"Ref" : "LambdaZipsBucketName"},
          "S3Key" : {"Fn::Join" : ["", [{"Ref" : "LambdaZipsFolderName"}, "/", {"Ref" : "LambdaZipsKeyNameBase"}, {"Ref" : "LambdaZipsRevision"}, ".zip"]]}
        },
        "Handler": "squash.deployment.lambdas.CognitoCustomResourceLambda::handleRequest",
        "Runtime": "java8",
        "MemorySize" : 1024,
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : ["SquashCognitoCustomResourceLambdaExecutionRole", "Arn"] }
      },
      "DependsOn": [
        "SquashCognitoCustomResourceLambdaExecutionRole",
        "SquashCognitoAuthenticatedRole",
        "SquashCognitoUnauthenticatedRole"]
    },

    "SquashCognitoCustomResource": {
      "Type": "Custom::SquashCognito",
      "Metadata" : { "Comment" : "Lambda-backed custom resource to manage our Cognito identity pool" },
      "Type" : "Custom::SquashCognito",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": { "Fn::GetAtt" : ["SquashCognitoCustomResourceLambda", "Arn"] },
        "StackName" : { "Ref" : "AWS::StackName" },
        "AuthenticatedRole" : { "Fn::GetAtt" : ["SquashCognitoAuthenticatedRole", "Arn"] },
        "AuthenticatedRoleName" : {"Ref" : "SquashCognitoAuthenticatedRole"},
        "UnauthenticatedRole" : { "Fn::GetAtt" : ["SquashCognitoUnauthenticatedRole", "Arn"] },
        "UnauthenticatedRoleName" : {"Ref" : "SquashCognitoUnauthenticatedRole"},
        "Region" : { "Ref" : "AWS::Region" },
        "Revision" : {"Ref" : "LambdaZipsRevision"}
      },
      "DependsOn": ["SquashCognitoCustomResourceLambda", "WebsiteBucket"]
    }
  },

  "Outputs" : {
    "SquashWebsite" : {
      "Description" : "URL of Squash website (ok even when javascript disabled)",
      "Value" : { "Fn::GetAtt" : [ "SquashBookingsHtmlCustomResource", "WebsiteURL" ] }
    },

    "SquashWebsiteJs" : {
      "Description" : "URL of Squash website (original Javascript version)",
      "Value" : {"Fn::Join" : ["/", [
                  { "Fn::GetAtt" : [ "WebsiteBucket", "WebsiteURL" ] },
                  "bookings.html"
                ]]}               
    }
  }
}